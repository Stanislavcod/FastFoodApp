// <auto-generated />
using System;
using FastFoodApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FastFoodApp.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220721004244_AllAdd")]
    partial class AllAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ComboProduct", b =>
                {
                    b.Property<string>("CombosName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CombosName", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ComboProduct");
                });

            modelBuilder.Entity("CouponsProduct", b =>
                {
                    b.Property<int>("CouponsNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CouponsNumber", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CouponsProduct");
                });

            modelBuilder.Entity("FastFoodApp.Class.Blacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("FastFoodApp.Class.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FastFoodApp.Class.Combo", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Name");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("FastFoodApp.Class.Coupons", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Number");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("FastFoodApp.Class.CreditCard", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Number");

                    b.HasIndex("CustomerLogin");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("FastFoodApp.Class.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeLogin")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeLogin");

                    b.HasIndex("OrderId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("FastFoodApp.Class.Departament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departaments");
                });

            modelBuilder.Entity("FastFoodApp.Class.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ComboId")
                        .HasColumnType("int");

                    b.Property<string>("CombosName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CouponsId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeesLogin")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CombosName");

                    b.HasIndex("CouponsId");

                    b.HasIndex("CustomerLogin");

                    b.HasIndex("EmployeesLogin");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FastFoodApp.Class.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.Property<int>("WareHouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SuppliersId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("FastFoodApp.Class.Suppliers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("FastFoodApp.Class.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Login");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FastFoodApp.Class.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("FastFoodApp.Class.Customer", b =>
                {
                    b.HasBaseType("FastFoodApp.Class.User");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlacklistId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BlacklistId");

                    b.HasIndex("CityId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("FastFoodApp.Class.Employee", b =>
                {
                    b.HasBaseType("FastFoodApp.Class.User");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("BlacklistId")
                        .HasColumnType("int");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerLogin")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BlacklistId");

                    b.HasIndex("ManagerLogin");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FastFoodApp.Class.Manager", b =>
                {
                    b.HasBaseType("FastFoodApp.Class.User");

                    b.Property<int>("BlacklistId")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentId")
                        .HasColumnType("int");

                    b.HasIndex("BlacklistId");

                    b.HasIndex("DepartamentId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("ComboProduct", b =>
                {
                    b.HasOne("FastFoodApp.Class.Combo", null)
                        .WithMany()
                        .HasForeignKey("CombosName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CouponsProduct", b =>
                {
                    b.HasOne("FastFoodApp.Class.Coupons", null)
                        .WithMany()
                        .HasForeignKey("CouponsNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FastFoodApp.Class.City", b =>
                {
                    b.HasOne("FastFoodApp.Class.City", null)
                        .WithMany("Cities")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("FastFoodApp.Class.CreditCard", b =>
                {
                    b.HasOne("FastFoodApp.Class.Customer", "Customer")
                        .WithMany("CreditCards")
                        .HasForeignKey("CustomerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FastFoodApp.Class.Delivery", b =>
                {
                    b.HasOne("FastFoodApp.Class.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeLogin");

                    b.HasOne("FastFoodApp.Class.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FastFoodApp.Class.Order", b =>
                {
                    b.HasOne("FastFoodApp.Class.Combo", "Combos")
                        .WithMany()
                        .HasForeignKey("CombosName");

                    b.HasOne("FastFoodApp.Class.Coupons", "Couponss")
                        .WithMany()
                        .HasForeignKey("CouponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.Employee", "Employees")
                        .WithMany()
                        .HasForeignKey("EmployeesLogin");

                    b.Navigation("Combos");

                    b.Navigation("Couponss");

                    b.Navigation("Customer");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("FastFoodApp.Class.Product", b =>
                {
                    b.HasOne("FastFoodApp.Class.Order", null)
                        .WithMany("Product")
                        .HasForeignKey("OrderId");

                    b.HasOne("FastFoodApp.Class.Suppliers", "Suppliers")
                        .WithMany("Products")
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.Warehouse", "WareHouse")
                        .WithMany("Products")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suppliers");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("FastFoodApp.Class.Customer", b =>
                {
                    b.HasOne("FastFoodApp.Class.Blacklist", "Blacklist")
                        .WithMany("Customers")
                        .HasForeignKey("BlacklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.User", null)
                        .WithOne()
                        .HasForeignKey("FastFoodApp.Class.Customer", "Login")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Blacklist");

                    b.Navigation("City");
                });

            modelBuilder.Entity("FastFoodApp.Class.Employee", b =>
                {
                    b.HasOne("FastFoodApp.Class.Blacklist", "Blacklist")
                        .WithMany("Employees")
                        .HasForeignKey("BlacklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.User", null)
                        .WithOne()
                        .HasForeignKey("FastFoodApp.Class.Employee", "Login")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.Manager", "Manager")
                        .WithMany("Employees")
                        .HasForeignKey("ManagerLogin");

                    b.Navigation("Blacklist");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("FastFoodApp.Class.Manager", b =>
                {
                    b.HasOne("FastFoodApp.Class.Blacklist", "Blacklist")
                        .WithMany("Managers")
                        .HasForeignKey("BlacklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.Departament", "Departament")
                        .WithMany("Managers")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FastFoodApp.Class.User", null)
                        .WithOne()
                        .HasForeignKey("FastFoodApp.Class.Manager", "Login")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Blacklist");

                    b.Navigation("Departament");
                });

            modelBuilder.Entity("FastFoodApp.Class.Blacklist", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Managers");
                });

            modelBuilder.Entity("FastFoodApp.Class.City", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FastFoodApp.Class.Departament", b =>
                {
                    b.Navigation("Managers");
                });

            modelBuilder.Entity("FastFoodApp.Class.Order", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("FastFoodApp.Class.Suppliers", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FastFoodApp.Class.Warehouse", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FastFoodApp.Class.Customer", b =>
                {
                    b.Navigation("CreditCards");
                });

            modelBuilder.Entity("FastFoodApp.Class.Manager", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
